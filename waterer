#!/usr/bin/env python3

from gpiozero import DistanceSensor, OutputDevice
from gpiozero.pins.pigpio import PiGPIOFactory
from datetime import datetime

import time
import yaml

factory = PiGPIOFactory(host="localhost")

def load_config():
    with open("config.yml", "r") as file:
        return(yaml.safe_load(file))

config = load_config()
reservoir_config = config["reservoir"]
planter_config = config["planter"]
pump_config = config["pump"]

reservoir = DistanceSensor(trigger=reservoir_config["trigger"], echo=reservoir_config["echo"], pin_factory=factory)
planter = DistanceSensor(trigger=planter_config["trigger"], echo=planter_config["echo"], pin_factory=factory)
pump = OutputDevice(pump_config["switch"], active_high=True, initial_value=False, pin_factory=factory)

def reservoir_level():
    return round(reservoir.distance * 100, 1)

def reservoir_volume(level):
    dv = (reservoir_config["max_volume"] - reservoir_config["min_volume"])
    dl = (reservoir_config["max_level"] - reservoir_config["min_level"])
    return((level - reservoir_config["min_level"]) * dv / dl + reservoir_config["min_volume"])

def planter_level():
    return round(planter.distance * 100, 1)

def reservoir_empty():
    return reservoir_level() > reservoir_config["min_level"]

def reservoir_full():
    return reservoir_level() < reservoir_config["max_level"]

def planter_empty():
    return planter_level() > planter_config["min_level"]

def planter_full():
    return planter_level() < planter_config["max_level"]

def planter_low():
    return planter_level() > planter_config["low_level"]

def log_filling_event(reason, start_time, reservoir_start):
    end_time = datetime.utcnow()
    reservoir_end = reservoir_level()
    line = "{},{},{},{},{},{},{}\n".format(
        start_time.strftime("%F %T.%f"),
        end_time.strftime("%F %T.%f"),
        reservoir_start,
        reservoir_end,
        reservoir_volume(reservoir_start),
        reservoir_volume(reservoir_end),
        reason
    )
    with open("/home/pi/water-log.csv", "a") as f:
        f.write(line)

def water():
    state = "idle"
    fill_start_time = None
    reservoir_start = None
    delay = 30 * 60
    try:
        print("Starting...")
        while True:
            if state != "empty" and reservoir_empty():
                if state == "filling":
                    log_filling_event("reservoir empty", fill_start_time, reservoir_start)
                state = "empty"
                print(f"Reservoir empty ({reservoir_level()}cm, ~{reservoir_volume(reservoir_level())}qt)")
                pump.off()
            elif state == "empty" and not(reservoir_empty()):
                print("Reservoir no longer empty")
                state = "idle"
            elif state == "idle" and planter_low():
                fill_start_time = datetime.utcnow()
                reservoir_start = reservoir_level()
                state = "filling"
                print("Planter low")
                pump.on()
            elif state == "filling" and planter_full():
                log_filling_event("full", fill_start_time, reservoir_start)
                state = "idle"
                print("Planter full")
                pump.off()
            elif state == "idle":
                print(f"Reservoir level: {reservoir_level()}cm / {reservoir_volume(reservoir_level())}qt")
                print(f"Planter level:   {planter_level()}cm")

            if state == "filling":
                time.sleep(1)
            elif state == "empty":
                time.sleep(30 * 60)
            else:
                time.sleep(5 * 60)
    finally:
        pump.off()

if __name__ == "__main__":
    water()
